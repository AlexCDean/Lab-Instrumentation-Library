from ...loads.load_interface import LoadInterface
from ...common import scpi_commands as cmds

# Note: The LD400P has one physical input channel.
# The two channels presented in the driver are actually 'saved load settings'.
# e.g. if chan A is set to 0.5A and chan B is set to 5A, you can change the load
# being generated by setting the active channel without changing the value.
# This is pointless for automation processes. Might be worthwhile
# making the LD400P default to chan A (value 0) from now on.
class LoadInterfaceLD400P(LoadInterface):
    _model = "LD400P"
    channels = [1]
    def get_identity(self):
        return self._query(cmds.SCPI_IDENTIFY)

    def switch_on(self):
        self._write('INP 1')

    def switch_off(self):
        self._write('INP 0')

    def set_mode_current(self):
        self._write('MODE C')

    def set_mode_power(self):
        self._write('MODE P')

    def set_mode_resistance(self):
        self._write('MODE R')

    def set_mode_conductance(self):
        self._write('MODE G')

    def set_mode_voltage(self):
        self._write('MODE V')

    def get_mode(self):
        return self._query('MODE?')

    def set_range_high(self):
        self._write('RANGE 0')

    def set_range_low(self):
        self._write('RANGE 1')

    def get_range(self):
        return self._query('RANGE?')

    def set_600W(self):
        self._write('600W 1')

    def set_400W(self):
        self._write('600W 0')

    def get_power_mode(self):
        # TODO Is this really necessary? .
        # If it is then it needs to return 400 or 600 (numerical?)
        return self._query('600W?')

    def _set_level_A(self, value):
        '''Sets the Level of A to value.
           Units are implied bu the present load mode'''
        self._write('A %f' % value)

    def _set_level_B(self, value):
        '''Sets the Level of B to value.
           Units are implied bu the present load mode'''
        self._write('B %f' % value)

    def get_level_A(self):
        return self.response_to_float(self._query('A?'))

    def get_level_B(self):
        return self.response_to_float(self._query('B?'))

    def _set_active_channel_A(self):
        self._write('LVLSEL A')

    def _set_active_channel_B(self):
        self._write('LVLSEL B')

    def get_current_load(self):
        return self.response_to_float(self._query('I?'))

    def get_voltage_load(self):        
        return self.response_to_float(self._query('V?'))

    def query_set_level(self, chan):
        if chan == 1:
            return self.get_level_A()
        elif chan == 2:
            return self.get_level_B()
        else:
            raise ValueError(f"Error: Invalid channel selected on {self._model}:{self.serial}")

    def set_level(self, chan, value):
        if chan == 1:
            self._set_level_A(value)
        elif chan == 2:
            self._set_level_B(value)
        else:
            raise ValueError(f"Error: Invalid channel selected on {self._model}:{self.serial}")

    def set_active_channel(self, chan):
        if chan == 1:
            self._set_active_channel_A()
        elif chan == 2:
            self._set_active_channel_B()
        else:
            raise ValueError(f"Error: Invalid channel selected on {self._model}:{self.serial}")

    def get_active_channel(self):
        ret_val = self._query('LVLSEL?')
        stripped_val = ret_val.strip('LVLSEL \r\n')
        if stripped_val == 'A':
            return 1
        else:
            return 2
